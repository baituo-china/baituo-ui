import { ReactNode } from 'react';
import { ColumnProps } from './Column';
import DataSet from '../data-set/DataSet';
import Record from '../data-set/Record';
import { TableQueryBar } from './enum';
import ColumnGroups, { ColumnGroup } from './ColumnGroups';
export declare const EXPAND_KEY = "__expand-column__";
export default class TableStore {
    node: any;
    dataSet: DataSet;
    props: any;
    bodyHeight: number;
    width?: number;
    height?: number;
    lockColumnsBodyRowsHeight: any;
    lockColumnsFootRowsHeight: any;
    lockColumnsHeadRowsHeight: any;
    expandedRows: Record[];
    hoverRow?: Record;
    currentEditorName?: string;
    readonly columnResizable: boolean;
    readonly rowHeight: 'auto' | number;
    readonly emptyText: ReactNode;
    readonly highLightRow: boolean;
    readonly border: boolean;
    readonly queryBar: TableQueryBar;
    readonly pristine: boolean;
    currentEditRecord: Record | undefined;
    showCachedSeletion?: boolean;
    readonly isTree: boolean;
    readonly editing: boolean;
    readonly hasRowBox: boolean;
    readonly overflowX: boolean;
    readonly overflowY: boolean;
    readonly columns: ColumnProps[];
    readonly leftColumns: ColumnProps[];
    readonly rightColumns: ColumnProps[];
    readonly columnGroups: ColumnGroups;
    readonly groupedColumns: ColumnGroup[];
    readonly leftGroupedColumns: ColumnGroup[];
    readonly rightGroupedColumns: ColumnGroup[];
    readonly leafColumns: ColumnProps[];
    readonly leftLeafColumns: ColumnProps[];
    readonly rightLeafColumns: ColumnProps[];
    readonly leafNamedColumns: ColumnProps[];
    readonly totalLeafColumnsWidth: number;
    readonly leftLeafColumnsWidth: number;
    readonly rightLeafColumnsWidth: number;
    readonly hasCheckFieldColumn: boolean;
    readonly hasFooter: boolean;
    readonly isAnyColumnsResizable: boolean;
    readonly isAnyColumnsLock: boolean;
    readonly isAnyColumnsLeftLock: boolean;
    readonly isAnyColumnsRightLock: boolean;
    readonly data: Record[];
    readonly indeterminate: boolean;
    readonly allChecked: boolean;
    readonly expandIconAsCell: boolean;
    readonly expandIconColumnIndex: number;
    readonly inlineEdit: boolean;
    private handleSelectAllChange;
    constructor(node: any);
    getColumnHeaders(): Promise<{
        name: string;
        label: string;
    }[]>;
    showEditor(name: string): void;
    hideEditor(): void;
    showNextEditor(name: string, reserve: boolean): void;
    setProps(props: any): void;
    isRowExpanded(record: Record): boolean;
    setRowExpanded(record: Record, expanded: boolean): void;
    isRowHover(record: Record): boolean;
    setRowHover(record: Record, hover: boolean): void;
    expandAll(): void;
    collapseAll(): void;
    _leafColumns(columns: ColumnProps[]): ColumnProps[];
    _addExpandColumn(columns: ColumnProps[]): ColumnProps[];
    _addSelectionColumn(columns: ColumnProps[]): ColumnProps[];
}
