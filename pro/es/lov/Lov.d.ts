import { ReactNode } from 'react';
import PropTypes from 'prop-types';
import { ModalProps } from '../modal/Modal';
import DataSet from '../data-set/DataSet';
import { Select, SelectProps } from '../select/Select';
import { ColumnAlign } from '../table/enum';
import { FieldType } from '../data-set/enum';
import { LovFieldType } from './enum';
export declare type LovConfigItem = {
    display?: string;
    conditionField?: string;
    conditionFieldLovCode?: string;
    conditionFieldType?: FieldType | LovFieldType;
    conditionFieldName?: string;
    conditionFieldSelectCode?: string;
    conditionFieldSelectUrl?: string;
    conditionFieldSelectTf?: string;
    conditionFieldSelectVf?: string;
    conditionFieldSequence: number;
    gridField?: string;
    gridFieldName?: string;
    gridFieldWidth?: number;
    gridFieldAlign?: ColumnAlign;
    gridFieldSequence: number;
};
export declare type LovConfig = {
    title?: string;
    width?: number;
    height?: number;
    customUrl?: string;
    lovPageSize?: string;
    lovItems: LovConfigItem[] | null;
    treeFlag?: 'Y' | 'N';
    parentIdField?: string;
    idField?: string;
    textField?: string;
    valueField?: string;
    placeholder?: string;
    editableFlag?: 'Y' | 'N';
    queryColumns?: number;
};
export interface LovProps extends SelectProps {
    modalProps?: ModalProps;
    noCache?: boolean;
}
export default class Lov extends Select<LovProps> {
    static displayName: string;
    static propTypes: {
        modalProps: PropTypes.Requireable<object>;
        noCache: PropTypes.Requireable<boolean>;
        id: PropTypes.Requireable<string>;
        size: PropTypes.Requireable<import("../core/enum").Size>;
        suffixCls: PropTypes.Requireable<string>;
        prefixCls: PropTypes.Requireable<string>;
        title: PropTypes.Requireable<string>;
        disabled: PropTypes.Requireable<boolean>;
        hidden: PropTypes.Requireable<boolean>;
        autoFocus: PropTypes.Requireable<boolean>;
        style: PropTypes.Requireable<object>;
        className: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<number>;
        lang: PropTypes.Requireable<string>;
        onFocus: PropTypes.Requireable<(...args: any[]) => any>;
        onBlur: PropTypes.Requireable<(...args: any[]) => any>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onDoubleClick: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseUp: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseDown: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseMove: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOver: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseOut: PropTypes.Requireable<(...args: any[]) => any>;
        onContextMenu: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyDown: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyUp: PropTypes.Requireable<(...args: any[]) => any>;
        onKeyPress: PropTypes.Requireable<(...args: any[]) => any>;
        dataSet: PropTypes.Requireable<object>;
        type: PropTypes.Requireable<string>;
        name: PropTypes.Requireable<string>;
        value: PropTypes.Requireable<any>;
        defaultValue: PropTypes.Requireable<any>;
        required: PropTypes.Requireable<boolean>;
        readOnly: PropTypes.Requireable<boolean>;
        form: PropTypes.Requireable<string>;
        dataIndex: PropTypes.Requireable<number>;
        multiple: PropTypes.Requireable<boolean>;
        rowSpan: PropTypes.Requireable<number>;
        colSpan: PropTypes.Requireable<number>;
        validator: PropTypes.Requireable<(...args: any[]) => any>;
        validationRenderer: PropTypes.Requireable<(...args: any[]) => any>;
        onInvalid: PropTypes.Requireable<(...args: any[]) => any>;
        help: PropTypes.Requireable<string>;
        showHelp: PropTypes.Requireable<import("../field/enum").ShowHelp>;
        renderer: PropTypes.Requireable<(...args: any[]) => any>;
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        onInput: PropTypes.Requireable<(...args: any[]) => any>;
        onEnterDown: PropTypes.Requireable<(...args: any[]) => any>;
        placeholder: PropTypes.Requireable<string>;
        minLength: PropTypes.Requireable<number>;
        maxLength: PropTypes.Requireable<number>;
        pattern: PropTypes.Requireable<string | object>;
        autoComplete: PropTypes.Requireable<string>;
        prefix: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        suffix: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        clearButton: PropTypes.Requireable<boolean>;
        addonBefore: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        addonAfter: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        restrict: PropTypes.Requireable<string>;
        popupContent: PropTypes.Requireable<PropTypes.ReactElementLike>;
        popupCls: PropTypes.Requireable<string>;
        popupStyle: PropTypes.Requireable<object>;
        trigger: PropTypes.Requireable<any>;
        triggerShowDelay: PropTypes.Requireable<number>;
        triggerHiddenDelay: PropTypes.Requireable<number>;
        combo: PropTypes.Requireable<boolean>;
        searchable: PropTypes.Requireable<boolean>;
        primitiveValue: PropTypes.Requireable<boolean>;
        optionRenderer: PropTypes.Requireable<(...args: any[]) => any>;
    };
    static defaultProps: {
        clearButton: boolean;
        checkValueOnOptionsChange: boolean;
        suffixCls: string;
        combo: boolean;
        searchable: boolean;
        dropdownMatchSelectWidth: boolean;
        trigger: string[];
        triggerShowDelay: number;
        triggerHiddenDelay: number;
        autoComplete: string;
        multiple: boolean;
        readOnly: boolean;
        noValidate: boolean;
        showHelp: string;
    };
    modal: any;
    filterText?: string;
    readonly searchable: boolean;
    readonly lovCode: string | undefined;
    readonly popup: boolean;
    readonly options: DataSet;
    private openModal;
    private setFilterText;
    handleLovViewSelect: () => void;
    handleLovViewClose: () => Promise<void>;
    handleLovViewOk: () => Promise<void>;
    resetOptions(): boolean;
    setText(text: any): void;
    handleKeyDown(e: any): void;
    handleBlur(e: any): void;
    getConfig(): LovConfig | undefined;
    getPlaceholder(): string | undefined;
    getOtherProps(): Pick<Pick<Pick<Pick<Pick<Pick<any, string | number | symbol>, string | number | symbol>, string | number | symbol>, string | number | symbol>, string | number | symbol>, string | number | symbol>;
    getSuffix(): ReactNode;
    componentWillUnmount(): void;
}
