import { Component } from 'react';
import PropTypes from 'prop-types';
import { TreeNodeEvent, TreeNodeExpandEvent, TreeProps as C7NTreeProps } from '../../../lib/tree';
import DataSet from '../data-set/DataSet';
import { NodeRenderer } from './util';
export interface TreeProps extends C7NTreeProps {
    dataSet?: DataSet;
    renderer?: NodeRenderer;
    titleField?: string;
}
export default class Tree extends Component<TreeProps> {
    static displayName: string;
    static propTypes: {
        prefixCls: PropTypes.Requireable<string>;
        className: PropTypes.Requireable<string>;
        tabIndex: PropTypes.Requireable<string | number>;
        children: PropTypes.Requireable<any>;
        treeData: PropTypes.Requireable<any[]>;
        showLine: PropTypes.Requireable<boolean>;
        showIcon: PropTypes.Requireable<boolean>;
        icon: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        focusable: PropTypes.Requireable<boolean>;
        selectable: PropTypes.Requireable<boolean>;
        disabled: PropTypes.Requireable<boolean>;
        multiple: PropTypes.Requireable<boolean>;
        checkable: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        checkStrictly: PropTypes.Requireable<boolean>;
        draggable: PropTypes.Requireable<boolean>;
        defaultExpandParent: PropTypes.Requireable<boolean>;
        autoExpandParent: PropTypes.Requireable<boolean>;
        defaultExpandAll: PropTypes.Requireable<boolean>;
        defaultExpandedKeys: PropTypes.Requireable<(string | null)[]>;
        expandedKeys: PropTypes.Requireable<(string | null)[]>;
        defaultCheckedKeys: PropTypes.Requireable<(string | null)[]>;
        checkedKeys: PropTypes.Requireable<object>;
        defaultSelectedKeys: PropTypes.Requireable<(string | null)[]>;
        selectedKeys: PropTypes.Requireable<(string | null)[]>;
        onClick: PropTypes.Requireable<(...args: any[]) => any>;
        onDoubleClick: PropTypes.Requireable<(...args: any[]) => any>;
        onExpand: PropTypes.Requireable<(...args: any[]) => any>;
        onCheck: PropTypes.Requireable<(...args: any[]) => any>;
        onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        onLoad: PropTypes.Requireable<(...args: any[]) => any>;
        loadData: PropTypes.Requireable<(...args: any[]) => any>;
        loadedKeys: PropTypes.Requireable<(string | null)[]>;
        onMouseEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onMouseLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onRightClick: PropTypes.Requireable<(...args: any[]) => any>;
        onDragStart: PropTypes.Requireable<(...args: any[]) => any>;
        onDragEnter: PropTypes.Requireable<(...args: any[]) => any>;
        onDragOver: PropTypes.Requireable<(...args: any[]) => any>;
        onDragLeave: PropTypes.Requireable<(...args: any[]) => any>;
        onDragEnd: PropTypes.Requireable<(...args: any[]) => any>;
        onDrop: PropTypes.Requireable<(...args: any[]) => any>;
        filterTreeNode: PropTypes.Requireable<(...args: any[]) => any>;
        openTransitionName: PropTypes.Requireable<string>;
        openAnimation: PropTypes.Requireable<string | object>;
        switcherIcon: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
    };
    static TreeNode: any;
    stateCheckedKeys: string[];
    stateExpandedKeys: string[];
    stateForceRenderKeys: string[];
    readonly forceRenderKeys: string[];
    readonly expandedKeys: string[];
    readonly checkedKeys: string[];
    readonly selectedKeys: string[];
    constructor(props: any, context: any);
    setExpand(eventObj: TreeNodeExpandEvent): boolean;
    setCheck(eventObj: TreeNodeEvent): boolean;
    handleExpand: (expandedKeys: string[], eventObj: TreeNodeExpandEvent) => void;
    handleCheck: (checkedKeys: string[], eventObj: TreeNodeEvent) => void;
    handleSelect: (_selectedKeys: string[], eventObj: TreeNodeEvent) => void;
    render(): JSX.Element;
}
